#!KAMAILIO

#!define WITH_POSTGRES
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_TLS
#!define WITH_WEBSOCKETS
#!define WITH_IPV6

#!substdef "!MY_IP_ADDR!x.x.x.x!g"
#!substdef "!MY_IPV6_ADDR!x:x::x:x:x:x!g"
#!substdef "!MY_DOMAIN!x.yourdomain.com!g"
#!substdef "!MY_SIP_PORT!5060!g"
#!substdef "!MY_SIPS_PORT!5061!g"
#!substdef "!MY_WS_PORT!8080!g"
#!substdef "!MY_WSS_PORT!8443!g"
#!substdef "!MY_WS4_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS4_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"
#!substdef "!MY_EXTERNAL_IP!x.x.x.x!g"
#!substdef "!MY_EXTERNAL_IPV6!x:x::x:x:x:x!g" 



#!ifndef DBURL
#!define DBURL "mysql://kamailio:password@localhost/kamailio"
#!endif

# - flags
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define FLB_RTPWS 8
#!define FLB_BRIDGE 11

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=2
log_stderror=yes
#!else
debug=2
log_stderror=yes
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

port=MY_SIP_PORT
tls_port_no=MY_SIPS_PORT

#!ifdef WITH_TLS
enable_tls=yes
#!endif

listen=MY_IP_ADDR
#!ifdef WITH_WEBSOCKETS
#listen=MY_WS4_ADDR advertise MY_EXTERNAL_IP:MY_WS_PORT
listen=MY_WSS4_ADDR advertise MY_DOMAIN:MY_WSS_PORT
#!ifdef WITH_TLS
#listen=MY_WSS4_ADDR
listen=MY_WSS4_ADDR advertise MY_EXTERNAL_IP:MY_WSS_PORT
#!endif

#!ifdef WITH_IPV6
# IPv6 WebSocket listeners  
listen=MY_WSS6_ADDR advertise MY_DOMAIN:MY_WSS_PORT
listen=MY_WSS6_ADDR advertise MY_EXTERNAL_IPV6:MY_WSS_PORT
#!endif

#!ifdef WITH_IPV6
listen=MY_WSS6_ADDR advertise MY_EXTERNAL_IPV6:MY_WSS_PORT
#!endif


tcp_send_timeout=3
tcp_connect_timeout=10  # def = 10
tcp_connection_lifetime=3605
tcp_rd_buf_size=32768
tcp_max_connections=2048
tcp_connection_match=0  # match also local port # RMT#72522: 5.8.2++ is more strict: a WSS protocol is not finding the TLS socket and cannot send out messages to WSS
tcp_reuse_port=yes      # default: no
tcp_keepalive=yes       # Enables keepalive for tcp (sets SO_KEEPALIVE socket option)
tcp_keepcnt=3           # Number of keepalives sent before dropping the connection (TCP_KEEPCNT socket option). Linux only.
tcp_keepidle=30         # Time before starting to send keepalives, if the connection is idle (TCP_KEEPIDLE socket option). Linux only.
tcp_keepintvl=10        # Time interval between keepalive probes, when the previous probe failed (TCP_KEEPINTVL socket option). Linux only.
tcp_async=yes           # alias tcp_buf_write, default=yes
tcp_crlf_ping=no
tcp_accept_no_cl=yes

use_dns_cache = on          # Use KAMAILIO internal DNS cache
use_dns_failover = on       # Depends on KAMAILIO internal DNS cache
dns_srv_loadbalancing = on  
dns_try_naptr = on          
dns_retr_time=1             # Time in seconds before retrying a DNS request
dns_retr_no=3               # Number of DNS retransmissions before giving up
# Set protocol preference order - ignore target priority
dns_naptr_ignore_rfc= yes   # Ignore target NAPTR priority
dns_tls_pref=50             # First priority: TLS
dns_tcp_pref=30             # Second priority: TCP
dns_udp_pref=10             # Third priority: UDP

# set paths to location of modules (to sources or installation folders)

loadmodule "db_mysql.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"
loadmodule "path.so"
loadmodule "tsilo.so"
loadmodule "exec.so"
loadmodule "htable.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_WEBSOCKETS
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "max_inv_lifetime", 300000)      # 5 minutes max transaction lifetime
modparam("tm", "max_noninv_lifetime", 300000)   # 5 minutes for non-INVITE too
modparam("tm", "restart_fr_on_each_reply", 0)   # Don't restart timer on each 180

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
modparam("registrar", "method_filtering", 1)
modparam("registrar", "xavp_rcd", "ulrcd")


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_clean_tcp", 1)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif


##!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@sometelco.com")
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
##!endif

# ----- corex params -----
modparam("corex", "alias_subdomains", "MY_DOMAIN")

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "tls.cfg")
# Kamailio will start even if some of the OpenSSL sanity checks fail  ex TLS lib at compile diff from runtime , or diff kerberos 
modparam("tls", "tls_force_run", 11)
#!endif
#!ifdef WITH_WEBSOCKETS
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("websocket", "keepalive_interval", 30)
modparam("websocket", "keepalive_timeout", 10)
modparam("websocket", "keepalive_processes", 1)
#!endif

modparam("registrar", "use_path", 1)
modparam("registrar", "received_avp", "$avp(RECEIVED)")

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif


modparam("tsilo", "hash_size", 2048)
modparam("tsilo", "use_domain", 0)  # Enable multi-domain support if needed
modparam("htable", "htable", "ht_tsilo=>size=10;autoexpire=300;")


####### Routing Logic ########
request_route {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if (!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }

    if (has_totag()) {
        xlog("L_INFO", ">> has_totag(): Method = $rm, From = $fu, To = $tu\n");

        if (loose_route()) {
            xlog("L_INFO", ">> loose_route() successful for $rm\n");

            if (is_method("ACK|BYE")) {
                xlog("L_INFO", ">> $rm received\n");

                $var(aor) = "sip:" + $tU + "@x.yourrealm.com";
                if (!lookup("location")) {
                    xlog("L_ERR", ">> $rm routing failed, contact not found for $var(aor)\n");
                    exit;
                }

                fix_nated_contact();

                if ($proto == "udp" || $proto == "ws" || $proto == "wss") {
                    if (!lookup_xavp("location", $var(aor), "aorx", "contactx")) {
                        xlog("L_ERR", ">> lookup_xavp() failed for $var(aor)\n");
                        exit;
                    }

                    if ($xavp(contactx[0]=>contact) != $null) {
                        $du = $xavp(contactx[0]=>contact);
                        xlog("L_INFO", ">> Setting \$du from contact: $du\n");
                    } else {
                        xlog("L_WARN", ">> Contact URI missing for $var(aor)\n");
                    }

                    if ($xavp(contactx[0]=>socket) != $null) {
                        set_send_socket($xavp(contactx[0]=>socket));
                        xlog("L_INFO", ">> Setting send socket: $xavp(contactx[0]=>socket)\n");
                    } else {
                        xlog("L_WARN", ">> No socket found for contact — falling back to default route\n");
                    }
                }

                if (is_method("BYE")) {
                    rtpengine_delete();
                }
            }

            $var(in_is_ws) = $proto =~ "ws";
            $var(out_is_ws) = $ru =~ "transport=ws";

            if ($var(in_is_ws) && $var(out_is_ws)) {
                xlog("L_INFO", "WSS to WSS call detected: $fu → $ru\n");
                $xavp(wss=>is_wss2wss) = 1;
            }

            route(relay);
            exit;
        }

        xlog("L_WARN", ">> has_totag() but no loose_route(): dropping request\n");
        send_reply(404, "Dialog Not Found");
        exit;
    }


    
    # OPTIONS from known SIP gateways (health checks)
    if (is_method("OPTIONS") &&
        ($si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x")) {
        send_reply(200, "OK");
        exit;
    }

    # INVITEs from known gateways (no auth)
    if (is_method("INVITE") &&
        ($si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x" ||
         $si == "x.x.x.x")) {

        xlog("L_INFO", "Incoming INVITE from trusted gateway: $si\n");
        record_route();
        if (is_method("INVITE")) {
            if (!lookup("location")) {
                xlog("L_INFO", "User $ru offline — storing for TSILO\n");
                ts_store();
                send_reply(180, "Stored for Push Delivery -- 1");
                exit;
            }
        }
        t_on_failure("handle_failure");
        route(relay);
        exit;
    }
    fix_nated_contact();


    if (is_method("REGISTER")) {
        if (nat_uac_test("3")) {
            setbflag("6");
        }
        fix_nated_register();
    
        if (!www_authorize("x.yourrealm.com", "subscriber")) {
            www_challenge("x.yourrealm.com", "1");
            exit;
        }
    
        # Save location first
        if (!save("location")) {
            xlog("L_ERR", "Failed to save location for $fu\n");
            send_reply("500", "Location Save Failed");
            exit;
        }
    
        xlog("L_INFO", "Registration successful for $fu - checking for suspended transaction for $tu\n");
        $var(username) = $tU;  # Gets username part from To-URI

        if ($sht(ht_tsilo=>$var(username)::tindex) != $null && $sht(ht_tsilo=>$var(username)::tlabel) != $null) {
            $var(tindex) = $sht(ht_tsilo=>$var(username)::tindex);
            $var(tlabel) = $sht(ht_tsilo=>$var(username)::tlabel);
        
            xlog("L_INFO", "Resuming suspended transaction for username $var(username) (tindex=$var(tindex), tlabel=$var(tlabel))\n");
        
            # Clean up htable entries first
            $sht(ht_tsilo=>$var(username)::tindex) = $null;
            $sht(ht_tsilo=>$var(username)::tlabel) = $null;
        
            # Resume the suspended transaction
            if (t_continue("$var(tindex)", "$var(tlabel)", "TSILO_RESUME")) {
                xlog("L_INFO", "Successfully resumed transaction for $var(username)\n");
            } else {
                xlog("L_ERR", "Failed to resume transaction for $var(username)\n");
            }
        } else {
            xlog("L_INFO", "No suspended transaction found for username: $var(username)\n");
        }
    
        exit;
    }


    if (is_method("INVITE|MESSAGE|OPTIONS|BYE|CANCEL")) {
        if (!proxy_authorize("x.yourrealm.com, "subscriber")) {
            proxy_challenge("x.yourrealm.com", "0");
            exit;
        }
    }

    record_route();

if (is_method("INVITE") && !has_totag()) {
    if (!lookup("location")) {
        xlog("L_INFO", "User $ru not found in location - storing for TSILO\n");
        
        # Check if transaction already exists
        if (!t_lookup_request()) {
            # No transaction exists, create one
            if (!t_newtran()) {
                sl_send_reply("500", "Internal Error - Transaction Creation Failed");
                exit;
            }
            xlog("L_INFO", "Created new transaction for TSILO storage\n");
        }
        
        # Set timers for the transaction (in milliseconds; adjust as needed)
        t_set_fr(300000, 300000);  # 5 minutes for both timers
        
        if (ts_store()) {
            xlog("L_INFO", "Transaction stored in TSILO for $ru (tindex=$T(id_index), tlabel=$T(id_label))\n");
    
            # Store using username only (same as TSILO uses)
            $var(username) = $rU;  # Gets username part from R-URI
            $sht(ht_tsilo=>$var(username)::tindex) = $T(id_index);
            $sht(ht_tsilo=>$var(username)::tlabel) = $T(id_label);
    
            t_reply("180", "Trying - Push Notification Sent");
    
            if (t_suspend()) {
                xlog("L_INFO", "Transaction suspended successfully for username: $var(username)\n");
            } else {
                xlog("L_ERR", "Failed to suspend transaction for $var(username)\n");
                # Clean up htable if suspend failed
                $sht(ht_tsilo=>$var(username)::tindex) = $null;
                $sht(ht_tsilo=>$var(username)::tlabel) = $null;
            }
        }
        exit;
    }
}



    if ($proto =~ "ws" && $ru =~ "transport=ws") {
        xlog("L_INFO", "WSS to WSS call detected in pre-dialog: $fu → $ru\n");
        $xavp(wss=>is_wss2wss) = 1;
    }

    route(relay);



}

route[TSILO_RESUME] {
    xlog("L_INFO", "=== TSILO_RESUME: Processing resumed transaction ===\n");
    xlog("L_INFO", "Request: $rm from $fu to $ru\n");
    xlog("L_INFO", "Transaction: tindex=$T(id_index), tlabel=$T(id_label)\n");
    
    # Get the username for cleanup
    $var(cleanup_key) = "cleanup::" + $T(id_index) + "::" + $T(id_label);
    $var(username) = $sht(ht_tsilo=>$var(cleanup_key));
    
    if ($var(username) != $null) {
        xlog("L_INFO", "Cleaning up htable entries for username: $var(username)\n");
        # Clean up htable entries now that resume is successful
        $sht(ht_tsilo=>$var(username)::tindex) = $null;
        $sht(ht_tsilo=>$var(username)::tlabel) = $null;
        $sht(ht_tsilo=>$var(cleanup_key)) = $null;
    }
    
    # Look up the user's current location
    if (!lookup("location")) {
        xlog("L_WARN", "User $ru no longer available after registration\n");
        t_reply("480", "Temporarily Unavailable");
        exit;
    }
    
    xlog("L_INFO", "Found user location, relaying to: $du\n");
    
    # Set failure route
    t_on_failure("handle_failure");
    
    # Relay the call
    if (!t_relay()) {
        xlog("L_ERR", "Failed to relay resumed transaction\n");
        t_reply("500", "Internal Server Error");
    } else {
        xlog("L_INFO", "Successfully relayed resumed transaction\n");
    }
    
    exit;
}


onreply_route[handle_reply] {
    if ($rs =~ "18[0-9]|2[0-9][0-9]") {
        if (has_body("application/sdp")) {
            if ($xavp(wss=>is_wss2wss) == 1) {
                xlog("L_INFO", "**************************************Applying WSS-WSS rtpengine_answer()\n");
                rtpengine_answer("transport-protocol=UDP/TLS/RTP/SAVPF ICE=force DTLS=passive replace-origin trust-address rtcp-mux-offer");
                xlog("L_INFO","rtpengine_answer: transport-protocol=UDP/TLS/RTP/SAVPF ICE=force DTLS=passive replace-origin trust-address");
            } else {
                rtpengine_answer("replace-origin ICE=remove DTLS=remove RTP/AVP rtcp-mux-demux");
                xlog("L_INFO","rtpengine_answer: replace-origin ICE=remove DTLS=remove RTP/AVP rtcp-mux-demux");
            }
        }
        # Only rewrite Contact if the caller used UDP (i.e., from carrier)
        if ($proto == "udp") {
            remove_hf("Contact");
            append_hf("Contact: <sip:yournumber@x.x.x.x>\r\n");
        }
    }
}

failure_route[handle_failure] {
    if (t_is_canceled()) {
        xlog("L_INFO", "Call was cancelled by caller\n");
        exit;
        # Clean up any stored transaction data
        $var(username) = $rU;
        $sht(ht_tsilo=>$var(username)::tindex) = $null;
        $sht(ht_tsilo=>$var(username)::tlabel) = $null;

    }

    xlog("L_WARN", "Failure Route: status $T_reply_code from $si:$sp to $ru (branch $T_branch_idx)\n");

    if (t_check_status("408|480|486|503")) {
        xlog("L_INFO", "Branch $T_branch_idx failed with code $T_reply_code — trying next branch\n");
        return;
    }

    xlog("L_WARN", "All branches failed or no match — redirecting to voicemail\n");
    seturi("sip:voicemail@x.voicemail.com");
    t_relay();
    exit;
}


route[relay] {
    xlog("L_INFO", "Routing INVITE to socket: $du via R-URI: $ru\n");
    if (is_method("INVITE|ACK|BYE|CANCEL|PRACK|UPDATE")) {
        fix_nated_contact();
        #setdsturi($ru);

        if ($proto == "udp" && $ru =~ "transport=ws") {
            xlog("L_INFO", ">> Detected UDP to WSS bridging\n");
            # this will force Kamailio to reuse the TCP/WSS connection
        }
    }
    if (is_method("INVITE")) {
        rtpengine_offer("transport-protocol=UDP/TLS/RTP/SAVPF ICE=force DTLS=passive replace-origin trust-address rtcp-mux-offer");
        xlog("L_INFO","rtpengine_offer: transport-protocol=UDP/TLS/RTP/SAVPF ICE=force DTLS=passive replace-origin trust-address rtcp-mux-offer");
        t_on_reply("handle_reply");
    }

    xlog("L_INFO", ">>>> Routing $rm to WSS via socket: $du\n");

    if (!t_relay()) {
        send_reply(500, "Internal Error");
    }
    exit;
}


event_route[xhttp:request] {
    xlog("L_INFO", "event_route xhttp \n");
    set_reply_close();
    set_reply_no_connect();

    if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
        && $Rp != MY_WSS_PORT
#!endif
    ) {
        xlog("L_WARN", "HTTP request received on $Rp\n");
        xhttp_reply("403", "Forbidden", "", "");
        exit;
    }

    xlog("L_INFO", "HTTP Request Received\n");

    if ($hdr(Upgrade) =~ "websocket"
        && $hdr(Connection) =~ "Upgrade"
        && $rm =~ "GET"
    ) {

        # Validate Host - make sure the client is using the correct alias for WebSockets
        if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
            xlog("L_WARN", "Bad host $hdr(Host)\n");
            xhttp_reply("403", "Forbidden", "", "");
            exit;
        }
        if (ws_handle_handshake()) {
            # Optional... cache some information about the successful connection
            exit;
        }
    }

    xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
    xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif
